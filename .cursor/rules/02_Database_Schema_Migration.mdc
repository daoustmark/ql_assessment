---
description: 
globs: 
alwaysApply: true
---
# MDC Context: 02 - Database Schema Migration (Revised w/ Structure)

## Goal

Define the DB schema via a Supabase migration SQL file located in `supabase/migrations/`.

## Steps

1.  **Create Migration File:**
    * From the project root (`assessment-app/`):
        ```bash
        supabase migration new create_initial_schema
        ```
    * This creates `supabase/migrations/<timestamp>_create_initial_schema.sql`.

2.  **Define Schema in `supabase/migrations/<timestamp>_create_initial_schema.sql`:**
    * Open the generated `.sql` file.
    * Add `CREATE TABLE` statements for all tables: `assessments`, `parts`, `blocks`, `questions`, `mcq_options`, `scenarios`, `scenario_options`, `likert_statements`, `assessment_attempts`, `user_answers`, `results`.
    * **Ensure correct paths/locations:** This SQL file lives in `supabase/migrations/`.
    * **Specify relationships:** Use `REFERENCES table_name(id)` for foreign keys.
    * **Include `video_response_path`:** Add the `video_response_path text` column to the `user_answers` table definition.
    * **Enable RLS:** Add `ALTER TABLE table_name ENABLE ROW LEVEL SECURITY;` for tables containing user-specific data (`assessment_attempts`, `user_answers`). *Policies will be defined later.*
    * *(Refer to the SQL examples in the previous response for detailed table structures)*.

3.  **Apply Migration to Remote Supabase:**
    * From the project root:
        ```bash
        supabase db push
        ```
    * *Troubleshooting:* If errors occur, carefully read the CLI output, fix the SQL in the migration file, and run `db push` again.

4.  **Set up Supabase Storage Bucket (If not done):**
    * Manually via Supabase Dashboard -> Storage -> Create Bucket (`video_responses`).
    * Set RLS policies on the bucket (e.g., authenticated users can insert).


# Assessment Application Database Schema

This document provides a comprehensive overview of the database schema used for the Assessment Application. The schema is designed to support multi-part assessments with various question types, including multiple-choice, written responses, scenario-based questions, and Likert scales.

## Database Entity Relationship Diagram (ERD)

```
assessments
    ↓ 1:n
parts
    ↓ 1:n
blocks
    ↓ 1:n
questions ←→ mcq_options (1:n)
    ↓ 1:n     ↑
    ↓        scenarios ←→ scenario_options (1:n)
    ↓           ↑
user_answers    likert_statements (1:n)
    ↑
assessment_attempts
    ↑
users (auth.users)
```

## Tables

### assessments

The top-level container for an assessment.

| Column | Type | Description |
|--------|------|-------------|
| id | integer | Primary key |
| title | text | Title of the assessment |
| description | text | Description of the assessment |
| created_at | timestamp | Creation timestamp (default: now()) |

### parts

Sections of an assessment.

| Column | Type | Description |
|--------|------|-------------|
| id | integer | Primary key |
| assessment_id | integer | Foreign key to assessments |
| title | text | Title of the part |
| description | text | Description of the part |
| sequence_order | integer | Order within the assessment |
| created_at | timestamp | Creation timestamp (default: now()) |

### blocks

Containers for groups of related questions or scenarios within a part.

| Column | Type | Description |
|--------|------|-------------|
| id | integer | Primary key |
| part_id | integer | Foreign key to parts |
| title | text | Title of the block |
| description | text | Description of the block |
| block_type | text | Type of block (e.g., 'question_group', 'scenario', 'scenario_group', 'likert_group', 'email_scenario', 'video_scenario') |
| sequence_order | integer | Order within the part |
| created_at | timestamp | Creation timestamp (default: now()) |

### questions

Individual questions of various types.

| Column | Type | Description |
|--------|------|-------------|
| id | integer | Primary key |
| block_id | integer | Foreign key to blocks |
| question_text | text | Text of the question |
| question_type | text | Type of question (e.g., 'multiple-choice', 'textarea', 'written', 'video', 'email', 'likert') |
| sequence_order | integer | Order within the block |
| is_required | boolean | Whether an answer is required |
| created_at | timestamp | Creation timestamp (default: now()) |

### mcq_options

Options for multiple-choice questions.

| Column | Type | Description |
|--------|------|-------------|
| id | integer | Primary key |
| question_id | integer | Foreign key to questions |
| option_text | text | Text of the option |
| sequence_order | integer | Order within the question |
| created_at | timestamp | Creation timestamp (default: now()) |

### scenarios

Scenario-based questions or dilemmas.

| Column | Type | Description |
|--------|------|-------------|
| id | integer | Primary key |
| block_id | integer | Foreign key to blocks |
| scenario_text | text | Text describing the scenario |
| sequence_order | integer | Order within the block |
| created_at | timestamp | Creation timestamp (default: now()) |

### scenario_options

Options for scenario-based questions.

| Column | Type | Description |
|--------|------|-------------|
| id | integer | Primary key |
| scenario_id | integer | Foreign key to scenarios |
| option_text | text | Text of the option |
| sequence_order | integer | Order within the scenario |
| created_at | timestamp | Creation timestamp (default: now()) |

### likert_statements

Statements for Likert-scale questions.

| Column | Type | Description |
|--------|------|-------------|
| id | integer | Primary key |
| question_id | integer | Foreign key to questions |
| statement_text | text | Text of the statement |
| sequence_order | integer | Order within the question |
| created_at | timestamp | Creation timestamp (default: now()) |

### assessment_attempts

User attempts at taking assessments.

| Column | Type | Description |
|--------|------|-------------|
| id | integer | Primary key |
| user_id | uuid | Foreign key to auth.users |
| assessment_id | integer | Foreign key to assessments |
| start_time | timestamp | When the attempt was started |
| end_time | timestamp | When the attempt was completed |
| status | text | Status of the attempt (e.g., 'in_progress', 'completed', 'abandoned') |
| created_at | timestamp | Creation timestamp (default: now()) |

### user_answers

User responses to questions in an assessment attempt.

| Column | Type | Description |
|--------|------|-------------|
| id | integer | Primary key |
| attempt_id | integer | Foreign key to assessment_attempts |
| question_id | integer | Foreign key to questions |
| answer_text | text | Text answer for open-ended questions |
| selected_option_id | integer | Foreign key to mcq_options or scenario_options (for choice questions) |
| likert_value | integer | Numeric value for Likert-scale responses |
| video_response_path | text | Path to uploaded video response |
| created_at | timestamp | Creation timestamp (default: now()) |
| updated_at | timestamp | Last update timestamp |

## Row-Level Security Policies

### assessment_attempts

Policies that ensure users can only access their own assessment attempts:

```sql
-- Policy to allow users to view their own assessment attempts
CREATE POLICY "Users can view their own assessment attempts" 
  ON assessment_attempts
  FOR SELECT
  TO authenticated
  USING (user_id = auth.uid());

-- Policy to allow users to insert their own assessment attempts
CREATE POLICY "Users can insert their own assessment attempts" 
  ON assessment_attempts
  FOR INSERT
  TO authenticated
  WITH CHECK (user_id = auth.uid());

-- Policy to allow users to update their own assessment attempts
CREATE POLICY "Users can update their own assessment attempts" 
  ON assessment_attempts
  FOR UPDATE
  TO authenticated
  USING (user_id = auth.uid());
```

### user_answers

Policies that ensure users can only access their own answers:

```sql
-- Policy to allow users to view their own answers
CREATE POLICY "Users can view their own answers" 
  ON user_answers
  FOR SELECT
  TO authenticated
  USING (attempt_id IN (
    SELECT id FROM assessment_attempts WHERE user_id = auth.uid()
  ));

-- Policy to allow users to insert their own answers
CREATE POLICY "Users can insert their own answers" 
  ON user_answers
  FOR INSERT
  TO authenticated
  WITH CHECK (attempt_id IN (
    SELECT id FROM assessment_attempts WHERE user_id = auth.uid()
  ));

-- Policy to allow users to update their own answers
CREATE POLICY "Users can update their own answers" 
  ON user_answers
  FOR UPDATE
  TO authenticated
  USING (attempt_id IN (
    SELECT id FROM assessment_attempts WHERE user_id = auth.uid()
  ));
```

## Storage Buckets

### video_responses

Storage bucket for video responses submitted by users:

- Bucket name: `video_responses`
- Access level: Private with RLS policies
- File types: Video files (mp4, webm, etc.)

RLS policies ensure users can only access their own uploaded videos and administrators can access all videos.

## Indexes

Recommended indexes for performance optimization:

1. `assessment_attempts(user_id)` - For quick lookup of user attempts
2. `user_answers(attempt_id)` - For quick access to answers per attempt 
3. `questions(block_id, sequence_order)` - For ordered retrieval of questions within blocks
4. `parts(assessment_id, sequence_order)` - For ordered retrieval of parts within assessments

## Notes and Considerations

1. The schema supports nested structures (assessment → parts → blocks → questions) to organize complex assessments.
2. Different question types (multiple-choice, written, video, etc.) share the same questions table but link to type-specific tables as needed.
3. Row-Level Security (RLS) ensures data privacy and prevents unauthorized access.
4. All tables include timestamps for auditing and tracking purposes.
5. The sequence_order fields maintain the correct display order of elements. 

## Outcome

Database schema defined as code in `supabase/migrations/`. Tables created remotely in Supabase. Storage bucket `video_responses` exists.