---
description: 
globs: 
alwaysApply: true
---
# MDC Context: 01 - Project Setup & Supabase CLI (Revised w/ Structure)

## Goal

Initialize the Next.js project using the defined structure (`src/` dir, App Router). Install dependencies, configure Tailwind/daisyUI, set up Supabase env vars, and initialize the Supabase CLI.

## Steps

1.  **Create Next.js App:** (Ensure command uses `--app --src-dir`)
    ```bash
    npx create-next-app@latest assessment-app --ts --tailwind --eslint --app --src-dir --import-alias "@/*"
    cd assessment-app
    ```

2.  **Install Dependencies:**
    ```bash
    npm install @supabase/supabase-js @supabase/ssr # SSR for middleware/server components
    npm install -D daisyui@latest
    ```

3.  **Configure Tailwind & daisyUI:**
    * Edit `tailwind.config.ts` (ensure paths use `src/`):
        ```typescript
        // tailwind.config.ts
        import type { Config } from 'tailwindcss';

        const config: Config = {
          content: [
            // Updated paths to use src/
            './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
            './src/components/**/*.{js,ts,jsx,tsx,mdx}',
            './src/app/**/*.{js,ts,jsx,tsx,mdx}',
          ],
          theme: { extend: {} },
          plugins: [require("daisyui")],
          daisyui: { themes: ["light", "dark", "cupcake"] },
        };
        export default config;
        ```
    * Check `src/app/globals.css` for Tailwind directives.

4.  **Setup Supabase Environment Variables:**
    * Create `.env.local` in the project root.
    * Add keys:
        ```
        NEXT_PUBLIC_SUPABASE_URL=YOUR_SUPABASE_URL
        NEXT_PUBLIC_SUPABASE_ANON_KEY=YOUR_SUPABASE_ANON_KEY
        # Add Service Role Key later for seeding script
        SUPABASE_SERVICE_ROLE_KEY=YOUR_SERVICE_ROLE_KEY_HERE
        ```
    * Add `.env.local` to `.gitignore`.

5.  **Install & Configure Supabase CLI:**
    * Install CLI (if not already done).
    * In the project root (`assessment-app/`):
        ```bash
        supabase login
        supabase link --project-ref <your-project-id>
        supabase init # Creates supabase/ folder
        # supabase db pull # Optional: if schema exists remotely
        ```

6.  **Create Supabase Cliensupabase/client.ts`:
        ```typescript
        // src/lib/supabase/client.ts
        import { createBrowserClient } from '@supabase/ssr';

        export function createClient() {
          return createBrowserClient(
            process.env.NEXT_PUBLIC_SUPABASE_URL!,
            process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
          );
        }
        ```
    * Create `src/lib/supabase/admin.ts` (for seeding/backend):
        ```typescript
        // src/lib/supabase/admin.ts
        import { createClient } from '@supabase/supabase-js';

        const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
        const serviceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

        if (!supabaseUrl || !serviceKey) {
          // Avoid throwing error during build time if keys aren't needed yet
          console.warn('Supabase admin client: URL or Service Role Key potentially missing.');
        }

        // Ensure you only initialize/use this client in server-side/script contexts
        // where env vars are properly loaded and secure.
        export const supabaseAdmin = createClient(supabaseUrl!, serviceKey!, {
           auth: { autoRefreshToken: false, persistSession: false }
        });
        ```

7.  **Basic Root Layout:**
    * Create `src/components/ui/Layout.tsx`. This will wrap `src/app/layout.tsx`.
        ```typescript
        // src/components/ui/Layout.tsx
        import React from 'react';

        interface LayoutProps {
          children: React.ReactNode;
        }

        export function Layout({ children }: LayoutProps) {
          return (
            <div className="min-h-screen flex flex-col">
              {/* Add Navbar/Header component here later */}
              <main className="flex-grow container mx-auto p-4">
                {children}
              </main>
              {/* Add Footer component here later */}
            </div>
          );
        }
        ```
    * Update `src/app/layout.tsx` to use this Layout component within the `<body>`.

## Outcome

Project structure is set up according to the plan. Core dependencies installed. Supabase clients defined in `src/lib/supabase/`. Supabase CLI ready for migrations. Basic layout component exists.